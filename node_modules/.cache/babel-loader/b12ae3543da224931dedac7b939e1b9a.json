{"ast":null,"code":"/*\n    Author: Thao Ho\n    GitHub Handle: thaoHo618\n\n    thaoHo618.tsx: Adding a circle waveform visualizer\n*/ // 3rd party library imports\n// project imports\nimport{Visualizer}from'../Visualizers';export var CircleVisualizer=new Visualizer('Circle Waveform',function(p5,analyzer){var width=window.innerWidth;var height=window.innerHeight/2;var dim=Math.min(width,height);p5.angleMode('degrees');p5.background(0,0,0,255);// sets background color\np5.stroke(255,0,127);// sets border color\np5.strokeWeight(dim*0.02);// sets border thickness \np5.noFill();// disables filling geometry\np5.translate(width/2.5,height/2);// sets location of the object\nvar values=analyzer.getValue();p5.beginShape();for(var i=0;i<=180;i++){// creating the first half of the circle, thus <= 180\nvar index=p5.floor(p5.map(i,0,180,0,values.length-1));// using the index to map the radius of the circle to the waveform.\nvar r=p5.map(values[index],-1,1,150,300);// 150 and 350 are min and max radius of circle respectively                \nvar x=r*p5.sin(i);var y=r*p5.cos(i);p5.vertex(x,y);}p5.endShape();p5.beginShape();// eslint-disable-next-line\nfor(var i=0;i<=180;i++){// creating the mirror of the first half\n// eslint-disable-next-line\nvar index=p5.floor(p5.map(i,0,180,0,values.length-1));// using the index to map the radius of the circle to the waveform.\n// eslint-disable-next-line\nvar r=p5.map(values[index],-1,1,150,300);// eslint-disable-next-line\nvar x=r*-p5.sin(i);// Added a negative sign to create a mirrored image of the circle\n// eslint-disable-next-line\nvar y=r*p5.cos(i);p5.vertex(x,y);}p5.endShape();});","map":{"version":3,"sources":["/Users/kshitiz/final-project-tornado-main/client/src/visualizers/thaoHo618.tsx"],"names":["Visualizer","CircleVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","angleMode","background","stroke","strokeWeight","noFill","translate","values","getValue","beginShape","i","index","floor","map","length","r","x","sin","y","cos","vertex","endShape"],"mappings":"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","sourcesContent":["/*\n    Author: Thao Ho\n    GitHub Handle: thaoHo618\n\n    thaoHo618.tsx: Adding a circle waveform visualizer\n*/\n\n// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const CircleVisualizer = new Visualizer(\n    'Circle Waveform',\n    (p5: P5, analyzer: Tone.Analyser) => {\n    \n        const width = window.innerWidth;\n        const height = window.innerHeight / 2;\n        const dim = Math.min(width, height);\n        \n        p5.angleMode('degrees');\n        \n        p5.background(0, 0, 0, 255); // sets background color\n        p5.stroke(255, 0, 127);  // sets border color\n        p5.strokeWeight(dim * 0.02); // sets border thickness \n        p5.noFill(); // disables filling geometry\n        p5.translate (width/2.5, height/2 ); // sets location of the object\n        const values = analyzer.getValue(); \n\n        p5.beginShape();\n        for ( var i = 0 ; i <= 180; i++) { // creating the first half of the circle, thus <= 180\n            var index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n\n            // using the index to map the radius of the circle to the waveform.\n            var r = p5.map(values[index] as number, -1, 1, 150, 300); // 150 and 350 are min and max radius of circle respectively                \n            \n            var x =  r * p5.sin(i);\n            var y =  r * p5.cos(i) ;\n            p5.vertex(x, y);\n        }\n        p5.endShape();\n\n        \n        p5.beginShape();\n        // eslint-disable-next-line\n        for ( var i = 0 ; i <= 180; i++) { // creating the mirror of the first half\n            // eslint-disable-next-line\n            var index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n\n            // using the index to map the radius of the circle to the waveform.\n            // eslint-disable-next-line\n            var r = p5.map(values[index] as number, -1, 1, 150, 300);            \n            \n            // eslint-disable-next-line\n            var x =  r * (-p5.sin(i)); // Added a negative sign to create a mirrored image of the circle\n            // eslint-disable-next-line\n            var y =  r * p5.cos(i) ;\n            p5.vertex(x, y);\n        }\n        p5.endShape();\n    },\n  );"]},"metadata":{},"sourceType":"module"}