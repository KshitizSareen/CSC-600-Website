{"ast":null,"code":"// 3rd party\nimport { List, fromJS } from 'immutable'; // project deps\n\nexport class DispatchAction {\n  constructor(type, args) {\n    this.type = void 0;\n    this.args = void 0;\n    this.type = type;\n    this.args = fromJS(args);\n  }\n\n}\n/** ------------------------------------------------------------------------ **\n * Top-level application reducer.\n ** ------------------------------------------------------------------------ */\n\nexport function appReducer(state, action) {\n  const {\n    type,\n    args\n  } = action;\n  console.debug(`${type}`); // Question: Does this function remind of you registering callbacks?\n\n  const newState = (() => {\n    switch (type) {\n      case 'SET_SOCKET':\n        {\n          const oldSocket = state.get('socket');\n\n          if (oldSocket) {\n            oldSocket.close();\n          }\n\n          return state.set('socket', args.get('socket'));\n        }\n\n      case 'DELETE_SOCKET':\n        {\n          return state.delete('socket');\n        }\n\n      case 'SET_SONGS':\n        {\n          const songs = args.get('songs');\n          return state.set('songs', songs);\n        }\n\n      case 'PLAY_SONG':\n        {\n          const notes = state.get('songs').find(s => s.get('id') === args.get('id')).get('notes');\n          return state.set('notes', notes);\n        }\n\n      case 'STOP_SONG':\n        {\n          return state.delete('notes');\n        }\n\n      case 'SET_LOCATION':\n        {\n          var _URLSearchParams$get;\n\n          const pathname = args.getIn(['location', 'pathname'], '');\n          const search = args.getIn(['location', 'search'], '');\n          const instrumentName = pathname.substring(1);\n          const visualizerName = (_URLSearchParams$get = new URLSearchParams(search.substring(1)).get('visualizer')) !== null && _URLSearchParams$get !== void 0 ? _URLSearchParams$get : '';\n          const instruments = state.get('instruments');\n          const visualizers = state.get('visualizers');\n          const instrument = instruments.find(i => i.name === instrumentName);\n          const visualizer = visualizers.find(v => v.name === visualizerName);\n          return state.set('instrument', instrument).set('visualizer', visualizer);\n        }\n\n      case 'SHOW_SONG_DETAILS':\n        {\n          const SongDetail = args.get('SongDetail');\n          return state.set('SongDetail', SongDetail);\n        }\n\n      case 'SET_ALBUMS':\n        {\n          let Albums = args.get('albums', List());\n          return state.set('Albums', Albums);\n        }\n\n      case 'SET_ALBUM_SONGS':\n        {\n          let Albums = args.get('Albums', List());\n          let index = args.get('index', Number);\n          return state.set('FilteredSongs', Albums.get(index).get('songs'));\n        }\n\n      case 'SET_GENRES':\n        {\n          let Genres = args.get('genres', List());\n          return state.set('Genres', Genres);\n        }\n\n      case 'SET_GENRE_SONGS':\n        {\n          let Genres = args.get('Genres', List());\n          let index = args.get('index', Number);\n          return state.set('FilteredSongs', Genres.get(index).get('songs'));\n        }\n\n      case 'SEARCH_SONGS':\n        {\n          let SearchText = args.get('search', String());\n          let songs = args.get('songs', List());\n          let FilteredSongs = [];\n          songs.forEach(song => {\n            let songTitle = song.get('songTitle').toLowerCase().trim();\n\n            if (songTitle.includes(SearchText.toLowerCase().trim())) {\n              FilteredSongs.push(song);\n            }\n          });\n          return state.set('FilteredSongs', FilteredSongs);\n        }\n\n      default:\n        console.error(`type unknown: ${type}\\n`, args.toJS());\n        return state;\n    }\n  })();\n\n  console.debug(newState.update('socket', s => s ? '[socket]' : s).toJS());\n  return newState;\n}","map":{"version":3,"sources":["/Users/kshitiz/CSC-600-Website/src/Reducer.tsx"],"names":["List","fromJS","DispatchAction","constructor","type","args","appReducer","state","action","console","debug","newState","oldSocket","get","close","set","delete","songs","notes","find","s","pathname","getIn","search","instrumentName","substring","visualizerName","URLSearchParams","instruments","visualizers","instrument","i","name","visualizer","v","SongDetail","Albums","index","Number","Genres","SearchText","String","FilteredSongs","forEach","song","songTitle","toLowerCase","trim","includes","push","error","toJS","update"],"mappings":"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","sourcesContent":["// 3rd party\nimport { List, Map, fromJS } from 'immutable';\n\n// project deps\nimport { Instrument } from './Instruments';\nimport { Visualizer } from './Visualizers';\nimport { AppState } from './State';\n\n/** ------------------------------------------------------------------------ **\n * All user input is handled by DispatchAction.\n ** ------------------------------------------------------------------------ */\n\n/**\n * Observation: pure map (compare and contrast with impure map)\n *\n * 'instrument': Instrument\n * 'visualizer': Visualizer\n * 'songs': List<string>\n * 'notes': List<{id: number, songTitle: string, notes: string}>\n */\ntype DispatchArgs = {\n  [key: string]: any;\n};\n\n// A simple algebraic data-type with string literal types\ntype DispatchActionType =\n  | 'SET_SOCKET'\n  | 'DELETE_SOCKET'\n  | 'SET_SONGS'\n  | 'PLAY_SONG'\n  | 'STOP_SONG'\n  | 'SET_LOCATION'\n  | 'SHOW_SONG_DETAILS' \n  | 'SET_ALBUMS'\n  | 'SET_ALBUM_SONGS'\n  | 'SET_GENRES'\n  | 'SET_GENRE_SONGS'\n  | 'SEARCH_SONGS';\n\nexport class DispatchAction {\n  readonly type: DispatchActionType;\n  readonly args: Map<string, any>;\n\n  constructor(type: DispatchActionType, args?: DispatchArgs) {\n    this.type = type;\n    this.args = fromJS(args) as Map<string, any>;\n  }\n}\n\n/** ------------------------------------------------------------------------ **\n * Top-level application reducer.\n ** ------------------------------------------------------------------------ */\n\nexport function appReducer(state: AppState, action: DispatchAction): AppState {\n  const { type, args } = action;\n\n  console.debug(`${type}`);\n\n  // Question: Does this function remind of you registering callbacks?\n  const newState = (() => {\n    switch (type) {\n      case 'SET_SOCKET': {\n        const oldSocket = state.get('socket');\n        if (oldSocket) {\n          oldSocket.close();\n        }\n\n        return state.set('socket', args.get('socket'));\n      }\n      case 'DELETE_SOCKET': {\n        return state.delete('socket');\n      }\n      case 'SET_SONGS': {\n        const songs = args.get('songs');\n        return state.set('songs', songs);\n      }\n      case 'PLAY_SONG': {\n        const notes = state\n          .get('songs')\n          .find((s: any) => s.get('id') === args.get('id'))\n          .get('notes');\n        return state.set('notes', notes);\n      }\n      case 'STOP_SONG': {\n        return state.delete('notes');\n      }\n      case 'SET_LOCATION': {\n        const pathname = args.getIn(['location', 'pathname'], '') as string;\n        const search = args.getIn(['location', 'search'], '') as string;\n\n        const instrumentName: string = pathname.substring(1);\n        const visualizerName: string =\n          new URLSearchParams(search.substring(1)).get('visualizer') ?? '';\n        const instruments: List<Instrument> = state.get('instruments');\n        const visualizers: List<Visualizer> = state.get('visualizers');\n\n        const instrument = instruments.find(i => i.name === instrumentName);\n        const visualizer = visualizers.find(v => v.name === visualizerName);\n\n        return state\n          .set('instrument', instrument)\n          .set('visualizer', visualizer);\n      }\n\n      case 'SHOW_SONG_DETAILS':{\n        const SongDetail = args.get('SongDetail');\n        return state.set('SongDetail',SongDetail);\n      }\n\n      case 'SET_ALBUMS':{\n        let Albums : List<any> = args.get('albums',List());\n        return state.set('Albums',Albums);\n      }\n\n      case 'SET_ALBUM_SONGS':{\n        let Albums : List<any> =args.get('Albums',List())\n        let index : number = args.get('index',Number);\n        return state.set('FilteredSongs',Albums.get(index).get('songs'));\n      }\n\n      case 'SET_GENRES':{\n        let Genres : List<any> = args.get('genres',List());\n        return state.set('Genres',Genres);\n      }\n\n      case 'SET_GENRE_SONGS':{\n        let Genres : List<any> = args.get('Genres',List());\n        let index: number = args.get('index',Number);\n        return state.set('FilteredSongs',Genres.get(index).get('songs'));\n      }\n\n      case 'SEARCH_SONGS':{\n        let SearchText : String = args.get('search',String());\n        let songs : List<any> = args.get('songs',List());\n        let FilteredSongs : any[] = [];\n        songs.forEach(song=>{\n          let songTitle : String = song.get('songTitle').toLowerCase().trim();\n          if(songTitle.includes(SearchText.toLowerCase().trim()))\n          {\n            FilteredSongs.push(song);\n          }\n        })\n        return state.set('FilteredSongs',FilteredSongs);\n      }\n\n      default:\n        console.error(`type unknown: ${type}\\n`, args.toJS());\n        return state;\n    }\n  })();\n\n  console.debug(newState.update('socket', s => (s ? '[socket]' : s)).toJS());\n\n  return newState;\n}\n"]},"metadata":{},"sourceType":"module"}