{"ast":null,"code":"var _jsxFileName = \"/Users/kshitiz/final-project-tornado-main/client/src/instruments/sroy97.tsx\",\n    _s = $RefreshSig$();\n\n/*\n    Author: Saptarshi Roy\n    Github Handle: sroy97\n */\nimport { useState } from \"react\";\nimport { Instrument } from \"../Instruments\";\nimport \"./WindInstruments.css\";\nimport * as Tone from 'tone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WindInstrument() {\n  _s();\n\n  const windIcons = [\"clarinet.png\", \"flute.png\", \"horn.png\", \"oboe.png\", \"piccolo.png\", \"saxophone.png\", \"trombone.png\", \"trumpet.png\", \"tuba.png\"];\n  const tonePlayers = [\"/WindSounds/clarinet.wav\", \"/WindSounds/flute.wav\", \"/WindSounds/horn.wav\", \"/WindSounds/oboe.wav\", \"/WindSounds/piccolo.wav\", \"/WindSounds/sax.wav\", \"/WindSounds/trombone.wav\", \"/WindSounds/trumpet.wav\", \"/WindSounds/tuba.wav\"];\n  const [properties, setProperties] = useState([{\n    volume: 1,\n    pitch: 10,\n    reverb: 0.45,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.45,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.45,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.45,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.45,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.45,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.75,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.75,\n    stereo: 0.5\n  }, {\n    volume: 1,\n    pitch: 10,\n    reverb: 0.75,\n    stereo: 0.5\n  }]);\n\n  function PlaySound(index) {\n    const tonePlayer = new Tone.Player(tonePlayers[index]);\n    tonePlayer.autostart = true;\n\n    if (properties[index].volume === 0) {\n      tonePlayer.mute = true;\n    } else {\n      tonePlayer.mute = false;\n      tonePlayer.volume.value = properties[index].volume;\n    }\n\n    if (properties[index].pitch !== 0) {\n      // const pitchShift = new Tone.PitchShift({ pitch: -5 }).toMaster();\n      const pitch = new Tone.PitchShift(properties[index].pitch).toDestination();\n      tonePlayer.connect(pitch);\n    }\n\n    if (properties[index].reverb !== 0) {\n      const Reverb = new Tone.Reverb(properties[index].reverb).toDestination();\n      tonePlayer.connect(Reverb);\n    }\n\n    if (properties[index].stereo >= 0) {\n      const Stereo = new Tone.StereoWidener(properties[index].stereo).toDestination();\n      tonePlayer.connect(Stereo);\n    }\n\n    tonePlayer.toDestination();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    tabIndex: 0,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"windkit\",\n      children: windIcons.map((icon, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instrumentcontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"windinstrument\",\n            onClick: () => {\n              PlaySound(index);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"icon\",\n              src: \"/WindIcons/\" + icon,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            value: properties[index].volume,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.volume = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Pitch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            value: properties[index].pitch,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.pitch = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Reverb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            value: properties[index].reverb,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.reverb = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Stereo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            step: 1,\n            max: \"2\",\n            value: properties[index].stereo,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.stereo = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WindInstrument, \"ABDo1T57QJ12ID7Db2eOvEbkzj0=\");\n\n_c = WindInstrument;\n;\nexport const WindInstruments = new Instrument(\"Wind Family\", WindInstrument);\n\nvar _c;\n\n$RefreshReg$(_c, \"WindInstrument\");","map":{"version":3,"sources":["/Users/kshitiz/final-project-tornado-main/client/src/instruments/sroy97.tsx"],"names":["useState","Instrument","Tone","WindInstrument","windIcons","tonePlayers","properties","setProperties","volume","pitch","reverb","stereo","PlaySound","index","tonePlayer","Player","autostart","mute","value","PitchShift","toDestination","connect","Reverb","Stereo","StereoWidener","map","icon","property","propertyIndex","Number","parseInt","target","WindInstruments"],"mappings":"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","sourcesContent":["/*\n    Author: Saptarshi Roy\n    Github Handle: sroy97\n */\n\nimport {useState}  from \"react\";\nimport { Instrument } from \"../Instruments\";\nimport \"./WindInstruments.css\";\nimport * as Tone from 'tone';\nfunction WindInstrument()\n{\n    const windIcons =[\"clarinet.png\",\n                      \"flute.png\",\n                      \"horn.png\",\n                      \"oboe.png\",\n                      \"piccolo.png\",\n                      \"saxophone.png\",\n                      \"trombone.png\",\n                      \"trumpet.png\",\n                      \"tuba.png\"]\n\n    const tonePlayers=[\"/WindSounds/clarinet.wav\",\n                       \"/WindSounds/flute.wav\",\n                       \"/WindSounds/horn.wav\",\n                       \"/WindSounds/oboe.wav\",\n                       \"/WindSounds/piccolo.wav\",\n                       \"/WindSounds/sax.wav\",\n                       \"/WindSounds/trombone.wav\",\n                       \"/WindSounds/trumpet.wav\",\n                       \"/WindSounds/tuba.wav\"]\n\n    const [properties,setProperties] = useState([{\n        volume: 1,\n        pitch: 10,\n        reverb: 0.45,\n        stereo: 0.5\n    },{\n        volume: 1,\n        pitch: 10,\n        reverb: 0.45,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.45,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.45,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.45,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.45,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.75,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.75,\n        stereo: 0.5\n    },\n    {\n        volume: 1,\n        pitch: 10,\n        reverb: 0.75,\n        stereo: 0.5\n    }])\n            \n    function PlaySound(index: any) : void\n    {\n        const tonePlayer = new Tone.Player(tonePlayers[index]);\n        tonePlayer.autostart=true;\n        if(properties[index].volume===0)\n        {\n            tonePlayer.mute=true;\n        }\n        else\n        {\n            tonePlayer.mute=false;\n            tonePlayer.volume.value=properties[index].volume;\n        }\n        \n        if (properties[index].pitch!==0)\n        {\n         // const pitchShift = new Tone.PitchShift({ pitch: -5 }).toMaster();\n            const pitch = new Tone.PitchShift(properties[index].pitch).toDestination();\n            tonePlayer.connect(pitch);\n        }\n\n        if(properties[index].reverb!==0)\n        {\n            const Reverb = new Tone.Reverb(properties[index].reverb).toDestination();\n            tonePlayer.connect(Reverb);\n        }\n\n        if(properties[index].stereo>=0)\n        {\n            const Stereo = new Tone.StereoWidener(properties[index].stereo).toDestination();\n            tonePlayer.connect(Stereo);\n        }\n\n        tonePlayer.toDestination();\n    }\n\n    return(\n        <body tabIndex={0}>\n        <div className=\"windkit\">\n            {\n                        windIcons.map((icon,index)=>{\n                            return(\n                                <div className=\"instrumentcontainer\">\n                <div className=\"windinstrument\"  onClick={()=>{\n                    PlaySound(index);\n                }}>\n                    <img className=\"icon\" src={\"/WindIcons/\"+icon} alt=\"\"/>\n                </div>\n                    <label>Volume</label>\n                    <input type=\"range\" min=\"0\" max=\"10\" value={properties[index].volume} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.volume=Number.parseInt(value.target.value)\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    <label>Pitch</label>\n                    <input type=\"range\" min=\"0\" max=\"10\" value={properties[index].pitch} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.pitch=Number.parseInt(value.target.value)\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    <label>Reverb</label>\n                    <input type=\"range\" min=\"0\" max=\"10\" value={properties[index].reverb} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.reverb=Number.parseInt(value.target.value)\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    <label>Stereo</label>\n                    <input type=\"range\" min=\"0\" step={1} max=\"2\" value={properties[index].stereo} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.stereo=Number.parseInt(value.target.value);\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    </div>\n                            )\n                        })\n                    }\n            </div>\n        </body>\n    )\n};\n\nexport const WindInstruments = new Instrument(\"Wind Family\",WindInstrument);\n"]},"metadata":{},"sourceType":"module"}