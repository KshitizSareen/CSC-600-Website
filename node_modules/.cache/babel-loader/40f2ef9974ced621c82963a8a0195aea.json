{"ast":null,"code":"var _jsxFileName = \"/Users/kshitiz/CSC-600-Website/src/instruments/KshitizSareen.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Instrument } from \"../Instruments\";\nimport \"./Drums.css\";\nimport * as Tone from 'tone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Drums() {\n  _s();\n\n  const tonePlayers = [\"/drumsounds/clap.wav\", \"/drumsounds/crash.wav\", \"/drumsounds/open-hihat.wav\", \"/drumsounds/kick.wav\", \"/drumsounds/snare.wav\", \"/drumsounds/closed-hihat.wav\"];\n  const Icons = [\"clap.png\", \"crash.png\", \"open-hihat.png\", \"kick.png\", \"snare.png\", \"closed-hihat.png\"];\n  const [properties, setProperties] = useState([{\n    playBackRate: 1,\n    volume: 1,\n    reverb: 0,\n    steroe: 0.5\n  }, {\n    playBackRate: 1,\n    volume: 1,\n    reverb: 0,\n    steroe: 0.5\n  }, {\n    playBackRate: 1,\n    volume: 1,\n    reverb: 0,\n    steroe: 0.5\n  }, {\n    playBackRate: 1,\n    volume: 1,\n    reverb: 0,\n    steroe: 0.5\n  }, {\n    playBackRate: 1,\n    volume: 1,\n    reverb: 0,\n    steroe: 0.5\n  }, {\n    playBackRate: 1,\n    volume: 1,\n    reverb: 0,\n    steroe: 0.5\n  }]);\n\n  function ExecuteSound(index) {\n    const tonePlayer = new Tone.Player(tonePlayers[index]);\n    tonePlayer.autostart = true;\n    tonePlayer.playbackRate = properties[index].playBackRate;\n\n    if (properties[index].volume === 0) {\n      tonePlayer.mute = true;\n    } else {\n      tonePlayer.mute = false;\n      tonePlayer.volume.value = properties[index].volume;\n    }\n\n    if (properties[index].reverb !== 0) {\n      const Reverb = new Tone.Reverb(properties[index].reverb).toDestination();\n      tonePlayer.connect(Reverb);\n    }\n\n    if (properties[index].steroe >= 0) {\n      const Stereo = new Tone.StereoWidener(properties[index].steroe / 2).toDestination();\n      tonePlayer.connect(Stereo);\n    }\n\n    tonePlayer.toDestination();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    tabIndex: 0,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drumkit\",\n      children: Icons.map((icon, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"padcontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pad\",\n            onClick: () => {\n              ExecuteSound(index);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"icon\",\n              src: \"/icons/\" + icon,\n              alt: \"clap\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Playback Rate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"5\",\n            value: properties[index].playBackRate,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.playBackRate = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            value: properties[index].volume,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.volume = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Reverb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            value: properties[index].reverb,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.reverb = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Stereo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            step: 1,\n            max: \"2\",\n            value: properties[index].steroe,\n            onChange: value => {\n              setProperties(properties.map((property, propertyIndex) => {\n                if (propertyIndex === index) {\n                  property.steroe = Number.parseInt(value.target.value);\n                }\n\n                return property;\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Drums, \"hnDRCK6xwthaUV8h3chJyB5U0W0=\");\n\n_c = Drums;\n;\nexport const DrumsInstrument = new Instrument(\"Drums\", Drums);\n\nvar _c;\n\n$RefreshReg$(_c, \"Drums\");","map":{"version":3,"sources":["/Users/kshitiz/CSC-600-Website/src/instruments/KshitizSareen.tsx"],"names":["useState","Instrument","Tone","Drums","tonePlayers","Icons","properties","setProperties","playBackRate","volume","reverb","steroe","ExecuteSound","index","tonePlayer","Player","autostart","playbackRate","mute","value","Reverb","toDestination","connect","Stereo","StereoWidener","map","icon","property","propertyIndex","Number","parseInt","target","DrumsInstrument"],"mappings":"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","sourcesContent":["import { useState}  from \"react\";\nimport { Instrument } from \"../Instruments\"\nimport \"./Drums.css\"\nimport * as Tone from 'tone';\nfunction Drums()\n{\n    const tonePlayers=[\"/drumsounds/clap.wav\",\"/drumsounds/crash.wav\",\"/drumsounds/open-hihat.wav\",\"/drumsounds/kick.wav\",\"/drumsounds/snare.wav\",\"/drumsounds/closed-hihat.wav\"]\n    const Icons=[\"clap.png\",\"crash.png\",\"open-hihat.png\",\"kick.png\",\"snare.png\",\"closed-hihat.png\"]\n    const [properties,setProperties] = useState([{\n        playBackRate: 1,\n        volume: 1,\n        reverb: 0,\n        steroe: 0.5\n    },{\n        playBackRate: 1,\n        volume: 1,\n        reverb: 0,\n        steroe: 0.5\n    },\n    {\n        playBackRate: 1,\n        volume: 1,\n        reverb: 0,\n        steroe: 0.5\n    },\n    {\n        playBackRate: 1,\n        volume: 1,\n        reverb: 0,\n        steroe: 0.5\n    },\n    {\n        playBackRate: 1,\n        volume: 1,\n        reverb: 0,\n        steroe: 0.5\n    },\n    {\n        playBackRate: 1,\n        volume: 1,\n        reverb: 0,\n        steroe: 0.5\n    }])\n\n    function ExecuteSound(index: any) : void\n    {\n        const tonePlayer = new Tone.Player(tonePlayers[index]);\n        tonePlayer.autostart=true;\n        tonePlayer.playbackRate=properties[index].playBackRate;\n        if(properties[index].volume===0)\n        {\n            tonePlayer.mute=true;\n        }\n        else\n        {\n            tonePlayer.mute=false;\n            tonePlayer.volume.value=properties[index].volume;\n        }\n        if(properties[index].reverb!==0)\n        {\n        const Reverb = new Tone.Reverb(properties[index].reverb).toDestination();\n        tonePlayer.connect(Reverb);\n        }\n        if(properties[index].steroe>=0)\n        {\n            const Stereo = new Tone.StereoWidener(properties[index].steroe/2).toDestination();\n            tonePlayer.connect(Stereo);\n        }\n        tonePlayer.toDestination();\n    }\n\n    return(\n        <body tabIndex={0}>\n            <div className=\"drumkit\">\n            {\n                        Icons.map((icon,index)=>{\n                            return(\n                                <div className=\"padcontainer\">\n                <div className=\"pad\"  onClick={()=>{\n                    ExecuteSound(index);\n                }}>\n                    <img className=\"icon\" src={\"/icons/\"+icon} alt=\"clap\"/>\n                </div>\n                    <label>Playback Rate</label>\n                    <input type=\"range\" min=\"0\" max=\"5\" value={properties[index].playBackRate} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.playBackRate=Number.parseInt(value.target.value)\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    <label>Volume</label>\n                    <input type=\"range\" min=\"0\" max=\"10\" value={properties[index].volume} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.volume=Number.parseInt(value.target.value)\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    <label>Reverb</label>\n                    <input type=\"range\" min=\"0\" max=\"10\" value={properties[index].reverb} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.reverb=Number.parseInt(value.target.value)\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    <label>Stereo</label>\n                    <input type=\"range\" min=\"0\" step={1} max=\"2\" value={properties[index].steroe} onChange={(value)=>{\n                        setProperties(properties.map((property,propertyIndex)=>{\n                            if(propertyIndex===index)\n                            {\n                            property.steroe=Number.parseInt(value.target.value);\n                            }\n                            return(\n                                property\n                            )\n                        }))\n                    }}/>\n                    </div>\n                            )\n                        })\n                    }\n            </div>\n        </body>\n    )\n};\n\nexport const DrumsInstrument = new Instrument(\"Drums\",Drums);"]},"metadata":{},"sourceType":"module"}