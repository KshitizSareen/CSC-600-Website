{"ast":null,"code":"/*\n    Author: Thao Ho\n    GitHub Handle: thaoHo618\n\n    thaoHo618.tsx: Adding a circle waveform visualizer\n*/\n// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const CircleVisualizer = new Visualizer('Circle Waveform', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height);\n  p5.angleMode('degrees');\n  p5.background(0, 0, 0, 255); // sets background color\n\n  p5.stroke(255, 0, 127); // sets border color\n\n  p5.strokeWeight(dim * 0.02); // sets border thickness \n\n  p5.noFill(); // disables filling geometry\n\n  p5.translate(width / 2.5, height / 2); // sets location of the object\n\n  const values = analyzer.getValue();\n  p5.beginShape();\n\n  for (var i = 0; i <= 180; i++) {\n    // creating the first half of the circle, thus <= 180\n    var index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1)); // using the index to map the radius of the circle to the waveform.\n\n    var r = p5.map(values[index], -1, 1, 150, 300); // 150 and 350 are min and max radius of circle respectively                \n\n    var x = r * p5.sin(i);\n    var y = r * p5.cos(i);\n    p5.vertex(x, y);\n  }\n\n  p5.endShape();\n  p5.beginShape(); // eslint-disable-next-line\n\n  for (var i = 0; i <= 180; i++) {\n    // creating the mirror of the first half\n    // eslint-disable-next-line\n    var index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1)); // using the index to map the radius of the circle to the waveform.\n    // eslint-disable-next-line\n\n    var r = p5.map(values[index], -1, 1, 150, 300); // eslint-disable-next-line\n\n    var x = r * -p5.sin(i); // Added a negative sign to create a mirrored image of the circle\n    // eslint-disable-next-line\n\n    var y = r * p5.cos(i);\n    p5.vertex(x, y);\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/kshitiz/CSC-600-Website/src/visualizers/thaoHo618.tsx"],"names":["Visualizer","CircleVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","angleMode","background","stroke","strokeWeight","noFill","translate","values","getValue","beginShape","i","index","floor","map","length","r","x","sin","y","cos","vertex","endShape"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,IAAID,UAAJ,CAC5B,iBAD4B,EAE5B,CAACE,EAAD,EAASC,QAAT,KAAqC;AAEjC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASP,KAAT,EAAgBG,MAAhB,CAAZ;AAEAL,EAAAA,EAAE,CAACU,SAAH,CAAa,SAAb;AAEAV,EAAAA,EAAE,CAACW,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,EARiC,CAQJ;;AAC7BX,EAAAA,EAAE,CAACY,MAAH,CAAU,GAAV,EAAe,CAAf,EAAkB,GAAlB,EATiC,CASR;;AACzBZ,EAAAA,EAAE,CAACa,YAAH,CAAgBN,GAAG,GAAG,IAAtB,EAViC,CAUJ;;AAC7BP,EAAAA,EAAE,CAACc,MAAH,GAXiC,CAWpB;;AACbd,EAAAA,EAAE,CAACe,SAAH,CAAcb,KAAK,GAAC,GAApB,EAAyBG,MAAM,GAAC,CAAhC,EAZiC,CAYI;;AACrC,QAAMW,MAAM,GAAGf,QAAQ,CAACgB,QAAT,EAAf;AAEAjB,EAAAA,EAAE,CAACkB,UAAH;;AACA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAkBA,CAAC,IAAI,GAAvB,EAA4BA,CAAC,EAA7B,EAAiC;AAAE;AAC/B,QAAIC,KAAK,GAAGpB,EAAE,CAACqB,KAAH,CAASrB,EAAE,CAACsB,GAAH,CAAOH,CAAP,EAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqBH,MAAM,CAACO,MAAP,GAAgB,CAArC,CAAT,CAAZ,CAD6B,CAG7B;;AACA,QAAIC,CAAC,GAAGxB,EAAE,CAACsB,GAAH,CAAON,MAAM,CAACI,KAAD,CAAb,EAAgC,CAAC,CAAjC,EAAoC,CAApC,EAAuC,GAAvC,EAA4C,GAA5C,CAAR,CAJ6B,CAI6B;;AAE1D,QAAIK,CAAC,GAAID,CAAC,GAAGxB,EAAE,CAAC0B,GAAH,CAAOP,CAAP,CAAb;AACA,QAAIQ,CAAC,GAAIH,CAAC,GAAGxB,EAAE,CAAC4B,GAAH,CAAOT,CAAP,CAAb;AACAnB,IAAAA,EAAE,CAAC6B,MAAH,CAAUJ,CAAV,EAAaE,CAAb;AACH;;AACD3B,EAAAA,EAAE,CAAC8B,QAAH;AAGA9B,EAAAA,EAAE,CAACkB,UAAH,GA7BiC,CA8BjC;;AACA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAkBA,CAAC,IAAI,GAAvB,EAA4BA,CAAC,EAA7B,EAAiC;AAAE;AAC/B;AACA,QAAIC,KAAK,GAAGpB,EAAE,CAACqB,KAAH,CAASrB,EAAE,CAACsB,GAAH,CAAOH,CAAP,EAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqBH,MAAM,CAACO,MAAP,GAAgB,CAArC,CAAT,CAAZ,CAF6B,CAI7B;AACA;;AACA,QAAIC,CAAC,GAAGxB,EAAE,CAACsB,GAAH,CAAON,MAAM,CAACI,KAAD,CAAb,EAAgC,CAAC,CAAjC,EAAoC,CAApC,EAAuC,GAAvC,EAA4C,GAA5C,CAAR,CAN6B,CAQ7B;;AACA,QAAIK,CAAC,GAAID,CAAC,GAAI,CAACxB,EAAE,CAAC0B,GAAH,CAAOP,CAAP,CAAf,CAT6B,CASF;AAC3B;;AACA,QAAIQ,CAAC,GAAIH,CAAC,GAAGxB,EAAE,CAAC4B,GAAH,CAAOT,CAAP,CAAb;AACAnB,IAAAA,EAAE,CAAC6B,MAAH,CAAUJ,CAAV,EAAaE,CAAb;AACH;;AACD3B,EAAAA,EAAE,CAAC8B,QAAH;AACH,CAhD2B,CAAzB","sourcesContent":["/*\n    Author: Thao Ho\n    GitHub Handle: thaoHo618\n\n    thaoHo618.tsx: Adding a circle waveform visualizer\n*/\n\n// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const CircleVisualizer = new Visualizer(\n    'Circle Waveform',\n    (p5: P5, analyzer: Tone.Analyser) => {\n    \n        const width = window.innerWidth;\n        const height = window.innerHeight / 2;\n        const dim = Math.min(width, height);\n        \n        p5.angleMode('degrees');\n        \n        p5.background(0, 0, 0, 255); // sets background color\n        p5.stroke(255, 0, 127);  // sets border color\n        p5.strokeWeight(dim * 0.02); // sets border thickness \n        p5.noFill(); // disables filling geometry\n        p5.translate (width/2.5, height/2 ); // sets location of the object\n        const values = analyzer.getValue(); \n\n        p5.beginShape();\n        for ( var i = 0 ; i <= 180; i++) { // creating the first half of the circle, thus <= 180\n            var index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n\n            // using the index to map the radius of the circle to the waveform.\n            var r = p5.map(values[index] as number, -1, 1, 150, 300); // 150 and 350 are min and max radius of circle respectively                \n            \n            var x =  r * p5.sin(i);\n            var y =  r * p5.cos(i) ;\n            p5.vertex(x, y);\n        }\n        p5.endShape();\n\n        \n        p5.beginShape();\n        // eslint-disable-next-line\n        for ( var i = 0 ; i <= 180; i++) { // creating the mirror of the first half\n            // eslint-disable-next-line\n            var index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n\n            // using the index to map the radius of the circle to the waveform.\n            // eslint-disable-next-line\n            var r = p5.map(values[index] as number, -1, 1, 150, 300);            \n            \n            // eslint-disable-next-line\n            var x =  r * (-p5.sin(i)); // Added a negative sign to create a mirrored image of the circle\n            // eslint-disable-next-line\n            var y =  r * p5.cos(i) ;\n            p5.vertex(x, y);\n        }\n        p5.endShape();\n    },\n  );"]},"metadata":{},"sourceType":"module"}